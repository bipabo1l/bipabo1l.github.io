<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bipabo1l&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-02T16:59:09.086Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bipabo1l</name>
    <email>bipabo1l@csoio.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE监控：从爬虫到前后端到实时预警的全栈式研发</title>
    <link href="http://yoursite.com/2017/09/02/CVE%E7%9B%91%E6%8E%A7%EF%BC%9A%E4%BB%8E%E7%88%AC%E8%99%AB%E5%88%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%B0%E5%AE%9E%E6%97%B6%E9%A2%84%E8%AD%A6%E7%9A%84%E5%85%A8%E6%A0%88%E5%BC%8F%E7%A0%94%E5%8F%91/"/>
    <id>http://yoursite.com/2017/09/02/CVE监控：从爬虫到前后端到实时预警的全栈式研发/</id>
    <published>2017-09-02T13:57:52.000Z</published>
    <updated>2017-09-02T16:59:09.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>在网络安全圈，攻防是核心，在攻防中漏洞的重要性不言而喻，而CVE全称Common Vulnerabilities and Exposures，是全世界通用漏洞的集合，对于安全人员来说及时知晓刚爆出的通用型漏洞对于企业来讲是十分必要的。本文讲解上周本人使用Golang、Vuejs、Mongodb、Beego等技术实现的CVE监控的一点技术探讨。</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>具体需求为，实时爬取与【公司内部使用的开源框架/组件】相关的业内最新的CVE漏洞，进行网页展示以及邮件报警。</p>
<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>由于Mongodb的灵活性与类Json形式的语法，选择其作为我们的数据库。根据需求我们需要两个表，一个表存储CVE关键字和其重要程度；领一个表存储具体爬下来的每一个条CVE详情。<br>关键字表数据格式如下（以两条信息为例）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;_id&quot; : ObjectId(&quot;599d2c1ca9218e4e8ec4e6xx&quot;),</div><div class="line">    &quot;keyword&quot; : [ </div><div class="line">        &#123;</div><div class="line">            &quot;wordname&quot; : &quot;spring&quot;,</div><div class="line">            &quot;wordcount&quot; : 1</div><div class="line">        &#125;, </div><div class="line">        &#123;</div><div class="line">            &quot;wordname&quot; : &quot;java&quot;,</div><div class="line">            &quot;wordcount&quot; : 2</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line">其中wordcount为1表示高危，wordcount为2表示中危。</div><div class="line">CVE详情表数据格式如下(以一条信息为例)：</div><div class="line">``` </div><div class="line">&#123;</div><div class="line">    &quot;_id&quot; : ObjectId(&quot;59a69bf70988ac81605b76xx&quot;),</div><div class="line">    &quot;cve&quot; : &quot;CVE-2017-13758&quot;,</div><div class="line">    &quot;keyword&quot; : &quot;ImageMagick&quot;,</div><div class="line">    &quot;note&quot; : &quot;In ImageMagick 7.0.6-10, there is a heap-based buffer overflow in theTracePoint() function in MagickCore/draw.c.&quot;,</div><div class="line">    &quot;time&quot; : &quot;2017-08-30 19:05:28&quot;,</div><div class="line">    &quot;references&quot; : &quot;CONFIRM:https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&amp;amp;t=32583&quot;,</div><div class="line">    &quot;isignored&quot; : true</div><div class="line">&#125;</div><div class="line">``` </div><div class="line">需要注意的是isignored字段表示是否需要忽略，在安全人员查看信息时，如果认为当前条目CVE不存在严重影响，甚至可以忽略时可以置其为忽略，而本字段记录其状态。</div><div class="line"></div><div class="line">## 爬虫的研发</div><div class="line"></div><div class="line">我们首先需要找到需要爬取的信息源，一方面需要一个接口能告知我们每日的更新，另一方面我们需要每个CVE编号对应的漏洞详情。通过CVE官网http://cve.mitre.org/，我们很快找到了两个需要的接口：</div><div class="line">``` </div><div class="line">https://cassandra.cerias.purdue.edu/CVE_changes/today.html</div><div class="line">``` </div><div class="line">以及</div><div class="line">``` </div><div class="line">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-xxxx-xxxx</div><div class="line">``` </div><div class="line">整体逻辑为向接口1发送请求，正则匹配出我们需要的【New entries】信息，如下图所示</div><div class="line">![](http://ovnsp3bhk.bkt.clouddn.com/Snipaste_2017-09-02_23-17-20.png)</div><div class="line">然后分别爬取每个cve对应的接口2的url，继续正则匹配出我们想要的漏洞详情信息、相关文档信息等，我们需要的信息如下。</div><div class="line">![](http://ovnsp3bhk.bkt.clouddn.com/Snipaste_2017-09-02_23-29-52.png)</div><div class="line">随后查keyword库判断是否为我们想要的漏洞，这里比较的是keyword与Description信息，如果是则存到库中。</div><div class="line">回看整个过程，略微存在技术难点的地方在于正则表达式的编写与golang操作数据库得mgo库的利用。</div><div class="line">发送请求利用的是grequest库，爬取每日CVE更新信息代码如下：</div><div class="line">``` </div><div class="line">func monitorCVEimpl() ([]string) &#123;</div><div class="line">	op := grequests.RequestOptions&#123;</div><div class="line">		RequestTimeout:     10 * time.Second,</div><div class="line">		InsecureSkipVerify: true,</div><div class="line">		RedirectLimit:      5,</div><div class="line">	&#125;</div><div class="line">	urlStr := &quot;https://cassandra.cerias.purdue.edu/CVE_changes/today.html&quot;</div><div class="line">	res, _ := grequests.Get(urlStr, &amp;op)</div><div class="line">	newEntriesStr := Between(res.String(), &quot;New entries:&lt;br /&gt;&quot;, &quot;Graduations (CAN to CVE)&quot;)</div><div class="line">	digitsRegexp := regexp.MustCompile(&quot;&lt;A HREF = &apos;(.*?)&apos;&gt;(.*?)&lt;/A&gt;&quot;)</div><div class="line">	data := digitsRegexp.FindAllStringSubmatch(newEntriesStr, -1)</div><div class="line">	cveStrList := []string&#123;&#125;</div><div class="line">	for _, v := range data &#123;</div><div class="line">		//fmt.Println(v[2])</div><div class="line">		if v[2] != &quot;&quot; &#123;</div><div class="line">			cveStrList = append(cveStrList, v[2])</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return cveStrList</div><div class="line">&#125;</div><div class="line">``` </div><div class="line">其中Between函数为一个工具函数，获取一个字符串中在字符串2和字符串3中间的字符串。</div><div class="line">``` </div><div class="line">func Between(str, starting, ending string) string &#123;</div><div class="line">	s := strings.Index(str, starting)</div><div class="line">	if s &lt; 0 &#123;</div><div class="line">		return &quot;&quot;</div><div class="line">	&#125;</div><div class="line">	s += len(starting)</div><div class="line">	e := strings.Index(str[s:], ending)</div><div class="line">	if e &lt; 0 &#123;</div><div class="line">		return &quot;&quot;</div><div class="line">	&#125;</div><div class="line">	return str[s: s+e]</div><div class="line">&#125;</div><div class="line">``` </div><div class="line">![](http://ovnsp3bhk.bkt.clouddn.com/Snipaste_2017-09-02_23-49-48.png)</div><div class="line">最终返回类似[&apos;2017-10848&apos;,&apos;2017-10849&apos;]的字符串切片。</div><div class="line">随后构造为接口2模式的url，同样的方式进行请求，通过工具函数和regexp包，我们能够获取到页面存在的我们需要的信息。随后进行入库操作，Golang操作Mongodb用的是mgo包，基本的增删改查语法可以在https://studygolang.com/articles/1737查阅到，需要注意的是我们经常会遇到模糊查询的情况，遇到模糊查询时，可以用下面的解决办法：</div></pre></td></tr></table></figure></p>
<p>err := mCVEdb.Find(bson.M{“cve”: bson.M{“$regex”: “CVE-2017”, “$options”: “$i”}}).Distinct(“cve”,&amp;res)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">查询数据库对象mCVEdb对应的数据库中，cve字段模糊匹配CVE-2017字样的文档，并且结果只返回cve集合。</div><div class="line">根据bson.go官方包中的规定,options参数设置为i是不分大小写的匹配，正好符合我们的需求。</div><div class="line">![](http://ovnsp3bhk.bkt.clouddn.com/Snipaste_2017-09-03_00-11-01.png)</div><div class="line">至此，我们成功的写完了爬虫脚本并且执行后能把数据存入我们的库中。</div><div class="line">![](http://ovnsp3bhk.bkt.clouddn.com/Snipaste_2017-09-03_00-17-38.png)</div><div class="line"></div><div class="line">## 界面的展现</div><div class="line"></div><div class="line">我们需要一个可视化平台，能够看到我们爬取到的CVE数据。搭建这个平台需要后端接口研发以及前端页面的展现。我们使用的golang http框架为beego，支持RESTful API和MVC模型。</div><div class="line">后端接口的研发：</div><div class="line">后端接口，主要是用来查询数据库中的数据并且以json格式返回。</div><div class="line">在Controller文件中写入</div></pre></td></tr></table></figure></p>
<p>// @router /cve/ [get]<br>func (c *CveController) GetAll() {<br>    var mResultCve = new(models.CveResult)<br>    result, err := mResultCve.Cve_search_today()<br>    if err != nil {<br>        c.Data[“json”] = utils.AjaxReturn(result, “get message success”, 1)<br>    }else {<br>        c.Data[“json”] = utils.AjaxReturn(“”, “Error”, -1)<br>    }<br>    c.ServeJSON()<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">models层中定义Cve_search_today()函数，将来我们可以在http://localhost:8080/cve接口获取到返回的json数据以供前端调用。</div><div class="line">Cve_search_today()函数模糊查询time字段为当天的数据即可，将[]CVEinfo和err一同返回。</div><div class="line">前端页面的研发：</div><div class="line">首先我们需要一个页面url，在Controller中指定：</div></pre></td></tr></table></figure></p>
<p>//@router /Cve [get]<br>func (this *CveController) GetPage() {<br>    this.Data[“title”] = “CVE信息 - “<br>    //导航的ID<br>    this.Data[“navCode”] = “opinionNavCode”<br>    this.TplName = “cveInfo/index.html”<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">随后编写cveInfo/index.html文件，利用layui+Vuejs进行开发</div><div class="line">js主要代码</div></pre></td></tr></table></figure></p>
<p>var vm = new Vue({<br>            delimiters: [‘[[‘, ‘]]’],<br>            el: “#body_id”,<br>            data: {<br>                url: “”,<br>                cveList: [],<br>                cveNum: 0,<br>                lasttime: “”,<br>                cveTasktime: “”,<br>                date_range_list: “”<br>                //testList: [“test1”, “test2”, “test3”, “test4”]<br>            },<br>            methods: {<br>                loadData: function (ev) {<br>                    var _cveurl = “/cve”<br>                    this.cveInfoUrl(_cveurl);<br>                    this.cveTaskInfo();<br>                },<br>                initLoad: function () {<br>                    var e = {“keyCode”: 13};<br>                    this.loadData(e);<br>                },<br>                cveInfoUrl: function (url) {<br>                    var me = this;<br>                    $.ajax({<br>                        async: true,<br>                        url: url,<br>                        type: ‘get’,<br>                        datatype: ‘json’,<br>                        success: function (data) {<br>                            me.buildData(data, me)<br>                        }<br>                    });<br>                },<br>                cveTaskInfo: function () {<br>                    var me = this;<br>                    $.ajax({<br>                        async: true,<br>                        url: “/CveTaskTime”,<br>                        type: ‘get’,<br>                        datatype: ‘json’,<br>                        success: function (data) {<br>                            me.lasttime = data.data;<br>                        }<br>                    });<br>                },<br>                buildData: function (data, me) {<br>                    $(‘#cve_id’).html(“<center style="margin-top:100px"><a class="layui-btn layui-btn-disabled">数据加载中…</a></center>“);</p>
<pre><code>            if (data.status == -1 || data.status == -5) {
                $(&apos;#cve_id&apos;).html(&quot;&lt;center style=&apos;margin-top:100px&apos;&gt;&lt;a  class=&apos;layui-btn layui-btn-disabled&apos;&gt;暂无cve信息&lt;/a&gt;&lt;/center&gt;&quot;);
                return false;
            } else {
                $(&apos;#cve_id&apos;).html(&quot;&quot;);
            }
            var _tmpList = data.data.CveList;
            console.log(data.data.CveNum);
            this.cveList = []
            this.cveNum = data.data.CveNum;
            for (var d in _tmpList) {
                if (_tmpList[d].Isignored == false) {
                    me.cveList.push({
                        &quot;cve&quot;: _tmpList[d].Cve,
                        &quot;keyword&quot;: _tmpList[d].Keyword,
                        &quot;note&quot;: _tmpList[d].Note,
                        &quot;time&quot;: _tmpList[d].Time,
                        &quot;reference&quot;: _tmpList[d].References,
                        &quot;isignored&quot;: _tmpList[d].Isignored
                    });
                }
            }
            for (var d in _tmpList) {
                if (_tmpList[d].Isignored == true) {
                    me.cveList.push({
                        &quot;cve&quot;: _tmpList[d].Cve,
                        &quot;keyword&quot;: _tmpList[d].Keyword,
                        &quot;note&quot;: _tmpList[d].Note,
                        &quot;time&quot;: _tmpList[d].Time,
                        &quot;reference&quot;: _tmpList[d].References,
                        &quot;isignored&quot;: _tmpList[d].Isignored
                    });
                }
            }
            console.log(me.cveList);
        },

        ignore: function (message) {
            $.get(&apos;/cveIgnore/&apos; + message, &apos;&apos;, function (data, status) {
                vm.buildData(data, vm)
            })
        },

        unignore: function (message) {
            $.get(&apos;/cveUnIgnore/&apos; + message, &apos;&apos;, function (data, status) {
                vm.buildData(data, vm)
            })
        }
    }
});

//加载事件
window.onload = function () {
    vm.initLoad();
};
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">html部分v-for循环读取ajax请求返回的内容，不再详述。</div><div class="line">页面效果如图：</div><div class="line">[]!(http://ovnsp3bhk.bkt.clouddn.com/Snipaste_2017-09-03_00-43-26.png)</div><div class="line">因为让页面更加简洁优美所以未将CVE漏洞详情信息放入页面。</div><div class="line"></div><div class="line">## 定时与实时</div><div class="line"></div><div class="line">要能够定时地完成爬取，我们就需要利用beego的Task任务模块。将开始我们编写的爬虫脚本挂载到beego框架中，然后在脚本最后加入</div></pre></td></tr></table></figure>
<p>func CveRun() {<br>    cveSpiderRun := toolbox.NewTask(“cve_spider_run”, “0 0 7 <em> </em> *”, CveSpider)<br>    toolbox.AddTask(“cve_spider_run”, cveSpiderRun)<br>    toolbox.StartTask()<br>    defer toolbox.StopTask()<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">需要注意的是toolbox.AddTask第二个参数是脚本启动的入口函数，0 0 7 * * *为定时任务的时间设定，再此为每日的7点，我们也可以自定义设置，比如每隔10分钟等等，语法与Linux中的Crontab类似。</div><div class="line">随后在beego Controller层的DefaultController中加入</div></pre></td></tr></table></figure></p>
<p>func init() {<br>    //初始化CVE任务<br>    cveTask.CveRun()<br>}<br>```<br>即可。<br>再此启动项目，访问8088端口(默认)，在Task中可以管理任务。<br><img src="http://ovnsp3bhk.bkt.clouddn.com/Snipaste_2017-09-03_00-51-46.png" alt=""></p>
<h2 id="邮件预警"><a href="#邮件预警" class="headerlink" title="邮件预警"></a>邮件预警</h2><p>在爬虫文件入库后加入邮件预警函数，内容也较为简单，低啊用github.com/go-gomail/gomail库发送html邮件，代码较为简单不再阐述，邮件正文如下<br><img src="http://ovnsp3bhk.bkt.clouddn.com/Snipaste_2017-09-03_00-54-31.png" alt=""></p>
<h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><p>这是上周我得一项主要任务，本项目仍可提高的点我认为有如下：<br>1.利用Golang并发编程机制加快爬虫速度<br>2.Web界面与邮件界面的UI更加优雅<br>3.多维度漏洞爬虫<br>感谢@Dean、@Mr.Hao、@tanglion在研发过程中对我的启发与帮助。<br>感谢阅读。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主题&quot;&gt;&lt;a href=&quot;#主题&quot; class=&quot;headerlink&quot; title=&quot;主题&quot;&gt;&lt;/a&gt;主题&lt;/h2&gt;&lt;p&gt;在网络安全圈，攻防是核心，在攻防中漏洞的重要性不言而喻，而CVE全称Common Vulnerabilities and Exposures
    
    </summary>
    
      <category term="安全研发" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E5%8F%91/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="Mongodb" scheme="http://yoursite.com/tags/Mongodb/"/>
    
      <category term="Beego" scheme="http://yoursite.com/tags/Beego/"/>
    
  </entry>
  
  <entry>
    <title>python 基于nmap多线程扫描ms17-010脚本</title>
    <link href="http://yoursite.com/2017/08/26/python-%E5%9F%BA%E4%BA%8Enmap%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%AB%E6%8F%8Fms17-010%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2017/08/26/python-基于nmap多线程扫描ms17-010脚本/</id>
    <published>2017-08-26T11:31:03.000Z</published>
    <updated>2017-08-26T12:11:39.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><p>nmap 7.50及以后的版本支持对MS17-010漏洞，即永恒之蓝漏洞的扫描，以下为针对甲方公司的安全人员，针对公司内网网段进行批量的多线程漏洞扫描。</p>
<p>脚本的原理为首先生成一个带扫描的ip文件，然后调用nmap命令nmap -iL ip_test.txt -p 445 –open -T4 -oX ./result/filename.txt来扫描开放了445端口的ip，并生成列表，随后读取445端口开放的ip并放入队列中，然后多线程处理队列中的ip并利用nmap命令nmap -p 445 –script smb-vuln-ms17-010.nse IP来检测存在漏洞的ip数量。</p>
<pre><code>#!/usr//bin/python
# -*- coding: utf-8 -*-
# author: bipabo1l@csoio.com

import os
import requests
import time
import re
import commands

list_vul_ip = []

class WyWorker(threading.Thread):
    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue

    def run(self):
        while True:
            if self.queue.empty():
                break
            try:
                ip = self.queue.get_nowait()
                if ip:
                    (status, output) = commands.getstatusoutput(&apos;nmap -p 445 --script smb-vuln-ms17-010.nse &apos; + ip)
                    print output
                    if &apos;CVE&apos; in output:
                        list_vul_ip.append(ip)
            except Exception, e:
                break
        print &quot;scan success&quot;
def main():
    try:
        threads_count = 10
        queue = Queue.Queue()
        print &quot;begin:&quot;
        files = &apos;445_open:&apos; + str(int(time.time()))
        print &quot;scaning:&quot;
        os.system(&apos;nmap -iL ip_test.txt -p 445 --open -T4 -oX ./result/%s.txt&apos; % files)
        print &quot;scansuccess&quot;
        file_name = files + &apos;.txt&apos;
        file = open(&apos;/root/619/445/result/%s&apos; % file_name)
        f_result = file.read()
        regex = &apos;addr(.*)addrtype&apos;
        list_ip = []
        for m in re.findall(regex, f_result):
            list_ip.append(m[10:-2])
        print &quot;445 port open mechines:&quot; 
        print list_ip
        for ip in list_ip:
            queue.put(ip)
        print queue.qsize()
        # 初始化线程组
        threads = []
        for i in xrange(threads_count):
            threads.append(WyWorker(queue))

        # 启动线程
        for t in threads:
            t.start()

        # 等待线程执行结束后，回到主线程中
        for t in threads:
            t.join()
        print list_vul_ip

    except:
        pass


if __name__ == &apos;__main__&apos;:
    main()
</code></pre>]]></content>
    
    <summary type="html">
    
      本文讲解如何通过脚本批量扫描内网中服务器是否开放445端口以及存在ms 17-010漏洞
    
    </summary>
    
      <category term="安全研发" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E5%8F%91/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="MS17-010" scheme="http://yoursite.com/tags/MS17-010/"/>
    
      <category term="wannaCry" scheme="http://yoursite.com/tags/wannaCry/"/>
    
  </entry>
  
  <entry>
    <title>whatweb入库乱码问题详解</title>
    <link href="http://yoursite.com/2017/08/21/whatweb%E5%85%A5%E5%BA%93%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/08/21/whatweb入库乱码问题详解/</id>
    <published>2017-08-21T08:24:23.000Z</published>
    <updated>2017-08-26T12:18:46.010Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解笔者在使用whatweb对域名库中的域名进行指纹爬取并入库mongodb时遇到的一些坑以及解决方案。</p>
<h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>通过whatweb扫描出来的数据，插入到数据库中后，发现很多不同的编码和乱码，包括url编码、unicode编码、乱码等等，如下<br><img src="http://i.imgur.com/U3VSDzA.jpg" alt=""></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>当我直接在命令行执行几个数据库中Title字段乱码或者编码有问题的Domain时，命令行直接输出的Title是正常的中文汉字<br><img src="http://i.imgur.com/exLX3nS.jpg" alt=""><br>所以判断是代码的问题，进入到代码中，发现原来的代码whatweb扫描出来之后，未特殊判断可能带有汉字的Title，于是加上了一个单独的Title判断，如果是Title，那么Append到list之前经过一个函数处理，<br>函数判断是否为unicode（基本全部是unicode），如果是先url解码（因为当前的数据类型是）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">u&apos;JIMI%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA - %E4%BA%AC%E4%B8%9C&apos;</div></pre></td></tr></table></figure></p>
<p>想到把<br><img src="http://i.imgur.com/c7Zwvb8.png" alt=""><br>这段代码直接unicode转汉字应该就能解决问题了，于是加上</p>
<pre><code>.decode(&apos;unicode-escape&apos;)
</code></pre><p>发现直接输出为乱码，return后输出的并未unicode解密，反而二次unicode加密</p>
<p>于是思考从url解码之前就处理问题，而不是经过解码之后变成unicode再处理。发现在main函数中，最后输出时还有json.dumps处理，那么直接打印处理前的数据，看中文是如何显示的<br><img src="http://i.imgur.com/47SAyJB.png" alt=""><br>发现是控制台信息输出窗口按照ascii编码输出utf8编码的字符串的结果，这时候基本可以定位问题了，是在转换到json格式时出现的问题，json.dumps函数中加一个ensure_ascii参数，值设置为False即可。测试一下：<br><img src="http://i.imgur.com/qOemh19.png" alt=""><br>显示成功！</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以最后的解决方案为：<br>1.jdradar\core\fingerprint路径下的WhatWeb.py，parse_plugin函数中判断一下name是否为Title，如果是，将plugin.get(‘string’)处理成字符串模式后，plugins.append({name: deal_word_method(string)})plugins列表添加时string用deal_word_method函数处理，函数判断传入的word是否为unicode，是的话url解码。<br>然后返回<br><img src="http://i.imgur.com/2y69CFG.png" alt=""><br>2.在jdradar\tasks.py的fingerprint_scan函数中，加入json.dumps处理，ensure_ascii设置为False</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试是否有效：<br>选取一个原来差入后Title乱码的document，domain为<a href="http://jimi-api.jd.com:80" target="_blank" rel="external">http://jimi-api.jd.com:80</a><br><img src="http://i.imgur.com/emPA8cm.png" alt=""><br>利用如下代码，进行插入<br><img src="http://i.imgur.com/kih39mN.png" alt=""><br>插入成功后，查看DocumentTitle字段是否乱码<br><img src="http://i.imgur.com/iJJO6Pi.png" alt=""><br>执行成功，未乱码</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲解笔者在使用whatweb对域名库中的域名进行指纹爬取并入库mongodb时遇到的一些坑以及解决方案。&lt;/p&gt;
&lt;h2 id=&quot;详情&quot;&gt;&lt;a href=&quot;#详情&quot; class=&quot;headerlink&quot; title=&quot;详情&quot;&gt;&lt;/a&gt;详情&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;
    
    </summary>
    
      <category term="安全研发" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E5%8F%91/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/08/21/hello-world/"/>
    <id>http://yoursite.com/2017/08/21/hello-world/</id>
    <published>2017-08-21T06:34:13.131Z</published>
    <updated>2017-08-21T06:34:13.132Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
