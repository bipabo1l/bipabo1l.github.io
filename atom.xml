<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bipabo1l&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-26T12:11:39.928Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bipabo1l</name>
    <email>bipabo1l@csoio.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python 基于nmap多线程扫描ms17-010脚本</title>
    <link href="http://yoursite.com/2017/08/26/python-%E5%9F%BA%E4%BA%8Enmap%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%AB%E6%8F%8Fms17-010%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2017/08/26/python-基于nmap多线程扫描ms17-010脚本/</id>
    <published>2017-08-26T11:31:03.000Z</published>
    <updated>2017-08-26T12:11:39.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><p>nmap 7.50及以后的版本支持对MS17-010漏洞，即永恒之蓝漏洞的扫描，以下为针对甲方公司的安全人员，针对公司内网网段进行批量的多线程漏洞扫描。</p>
<p>脚本的原理为首先生成一个带扫描的ip文件，然后调用nmap命令nmap -iL ip_test.txt -p 445 –open -T4 -oX ./result/filename.txt来扫描开放了445端口的ip，并生成列表，随后读取445端口开放的ip并放入队列中，然后多线程处理队列中的ip并利用nmap命令nmap -p 445 –script smb-vuln-ms17-010.nse IP来检测存在漏洞的ip数量。</p>
<pre><code>#!/usr//bin/python
# -*- coding: utf-8 -*-
# author: bipabo1l@csoio.com

import os
import requests
import time
import re
import commands

list_vul_ip = []

class WyWorker(threading.Thread):
    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue

    def run(self):
        while True:
            if self.queue.empty():
                break
            try:
                ip = self.queue.get_nowait()
                if ip:
                    (status, output) = commands.getstatusoutput(&apos;nmap -p 445 --script smb-vuln-ms17-010.nse &apos; + ip)
                    print output
                    if &apos;CVE&apos; in output:
                        list_vul_ip.append(ip)
            except Exception, e:
                break
        print &quot;scan success&quot;
def main():
    try:
        threads_count = 10
        queue = Queue.Queue()
        print &quot;begin:&quot;
        files = &apos;445_open:&apos; + str(int(time.time()))
        print &quot;scaning:&quot;
        os.system(&apos;nmap -iL ip_test.txt -p 445 --open -T4 -oX ./result/%s.txt&apos; % files)
        print &quot;scansuccess&quot;
        file_name = files + &apos;.txt&apos;
        file = open(&apos;/root/619/445/result/%s&apos; % file_name)
        f_result = file.read()
        regex = &apos;addr(.*)addrtype&apos;
        list_ip = []
        for m in re.findall(regex, f_result):
            list_ip.append(m[10:-2])
        print &quot;445 port open mechines:&quot; 
        print list_ip
        for ip in list_ip:
            queue.put(ip)
        print queue.qsize()
        # 初始化线程组
        threads = []
        for i in xrange(threads_count):
            threads.append(WyWorker(queue))

        # 启动线程
        for t in threads:
            t.start()

        # 等待线程执行结束后，回到主线程中
        for t in threads:
            t.join()
        print list_vul_ip

    except:
        pass


if __name__ == &apos;__main__&apos;:
    main()
</code></pre>]]></content>
    
    <summary type="html">
    
      本文讲解如何通过脚本批量扫描内网中服务器是否开放445端口以及存在ms 17-010漏洞
    
    </summary>
    
      <category term="安全研发" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E5%8F%91/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="MS17-010" scheme="http://yoursite.com/tags/MS17-010/"/>
    
      <category term="wannaCry" scheme="http://yoursite.com/tags/wannaCry/"/>
    
  </entry>
  
  <entry>
    <title>whatweb入库乱码问题详解</title>
    <link href="http://yoursite.com/2017/08/21/whatweb%E5%85%A5%E5%BA%93%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/08/21/whatweb入库乱码问题详解/</id>
    <published>2017-08-21T08:24:23.000Z</published>
    <updated>2017-08-22T03:00:17.537Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解笔者在使用whatweb对域名库中的域名进行指纹爬取并入库mongodb时遇到的一些坑以及解决方案。</p>
<h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>通过whatweb扫描出来的数据，插入到数据库中后，发现很多不同的编码和乱码，包括url编码、unicode编码、乱码等等，如下<br><img src="http://i.imgur.com/U3VSDzA.jpg" alt=""></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>当我直接在命令行执行几个数据库中Title字段乱码或者编码有问题的Domain时，命令行直接输出的Title是正常的中文汉字<br><img src="http://i.imgur.com/exLX3nS.jpg" alt=""><br>所以判断是代码的问题，进入到代码中，发现原来的代码whatweb扫描出来之后，未特殊判断可能带有汉字的Title，于是加上了一个单独的Title判断，如果是Title，那么Append到list之前经过一个函数处理，<br>函数判断是否为unicode（基本全部是unicode），如果是先url解码（因为当前的数据类型是）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">u&apos;JIMI%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA - %E4%BA%AC%E4%B8%9C&apos;</div></pre></td></tr></table></figure></p>
<p>想到把<br><img src="http://i.imgur.com/c7Zwvb8.png" alt=""><br>这段代码直接unicode转汉字应该就能解决问题了，于是加上</p>
<pre><code>.decode(&apos;unicode-escape&apos;)
</code></pre><p>发现直接输出为乱码，return后输出的并未unicode解密，反而二次unicode加密</p>
<p>于是思考从url解码之前就处理问题，而不是经过解码之后变成unicode再处理。发现在main函数中，最后输出时还有json.dumps处理，那么直接打印处理前的数据，看中文是如何显示的<br><img src="http://i.imgur.com/47SAyJB.png" alt=""><br>发现是控制台信息输出窗口按照ascii编码输出utf8编码的字符串的结果，这时候基本可以定位问题了，是在转换到json格式时出现的问题，json.dumps函数中加一个ensure_ascii参数，值设置为False即可。测试一下：<br><img src="http://i.imgur.com/qOemh19.png" alt=""><br>显示成功！</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以最后的解决方案为：<br>1.jdradar\core\fingerprint路径下的WhatWeb.py，parse_plugin函数中判断一下name是否为Title，如果是，将plugin.get(‘string’)处理成字符串模式后，plugins.append({name: deal_word_method(string)})plugins列表添加时string用deal_word_method函数处理，函数判断传入的word是否为unicode，是的话url解码。<br>然后返回<br><img src="http://i.imgur.com/2y69CFG.png" alt=""><br>2.在jdradar\tasks.py的fingerprint_scan函数中，加入json.dumps处理，ensure_ascii设置为False</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试是否有效：<br>选取一个原来差入后Title乱码的document，domain为<a href="http://jimi-api.jd.com:80" target="_blank" rel="external">http://jimi-api.jd.com:80</a><br><img src="http://i.imgur.com/emPA8cm.png" alt=""><br>利用如下代码，进行插入<br><img src="http://i.imgur.com/kih39mN.png" alt=""><br>插入成功后，查看DocumentTitle字段是否乱码<br><img src="http://i.imgur.com/iJJO6Pi.png" alt=""><br>执行成功，未乱码</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲解笔者在使用whatweb对域名库中的域名进行指纹爬取并入库mongodb时遇到的一些坑以及解决方案。&lt;/p&gt;
&lt;h2 id=&quot;详情&quot;&gt;&lt;a href=&quot;#详情&quot; class=&quot;headerlink&quot; title=&quot;详情&quot;&gt;&lt;/a&gt;详情&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/08/21/hello-world/"/>
    <id>http://yoursite.com/2017/08/21/hello-world/</id>
    <published>2017-08-21T06:34:13.131Z</published>
    <updated>2017-08-21T06:34:13.132Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
